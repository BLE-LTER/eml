<?xml version="1.0"?>
<xs:schema targetNamespace="eml:software-2.0.0beta9"
xmlns="eml:software-2.0.0beta9" xmlns:res="eml:resource-2.0.0beta9"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:doc="eml:documentation-2.0.0beta9" xmlns:proj="eml:project-2.0.0beta9"
xmlns:acc="eml:access-2.0.0beta9">
  <xs:import namespace="eml:documentation-2.0.0beta9"
  schemaLocation="eml-documentation.xsd" />
  <xs:import namespace="eml:resource-2.0.0beta9"
  schemaLocation="eml-resource.xsd" />
  <xs:import namespace="eml:access-2.0.0beta9"
  schemaLocation="eml-access.xsd" />
  <xs:import namespace="eml:project-2.0.0beta9"
  schemaLocation="eml-project.xsd" />
  <xs:annotation>
    <xs:documentation>
    '$RCSfile: eml-software.xsd,v $'
       Copyright: 1997-2002 Regents of the University of California,
                            University of New Mexico, and
                            Arizona State University
        Sponsors: National Center for Ecological Analysis and Synthesis and
                  Partnership for Interdisciplinary Studies of Coastal Oceans,
                     University of California Santa Barbara
                  Long-Term Ecological Research Network Office,
                     University of New Mexico
                  Center for Environmental Studies, Arizona State University
   Other funding: National Science Foundation (see README for details)
                  The David and Lucile Packard Foundation
     For Details: http://knb.ecoinformatics.org/

        '$Author: berkley $'
          '$Date: 2002-06-14 16:34:13 $'
      '$Revision: 1.21 $'

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <doc:moduleDocs>
        <doc:moduleName>eml-software</doc:moduleName>
        <doc:moduleDescription>The eml-software module contains general
        information that describes software resources.</doc:moduleDescription>
        <doc:recommendedUsage>All dataset where software was used in
        the analysis or creation of the dataset.</doc:recommendedUsage>
        <doc:standAlone>yes</doc:standAlone>
      </doc:moduleDocs>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="software" type="SoftwareType">
    <xs:annotation>
      <xs:appinfo>
        <doc:tooltip>Software Package</doc:tooltip>
        <doc:summary>Defines a software distribution and all of its dependent
        software.</doc:summary>
        <doc:description>The 'software' element contains general information
        about a software resource that is being documented. This field is
        intended to give information for software tools that are needed to
        interpret a dataset, software that was written to process a resource,
        or software as a resource in itself. It is based on eml-resource and
        Open Software Description (OSD) a W3C submission. There can be multiple
        implementations within a software package because a physical software
        package can run on multiple hardware and/or operating systems. See
        implementation element documentation for a more thorough
        explanation.</doc:description>
        <doc:example>Please see the examples for each subelement of the
        'software' type.</doc:example>
        <doc:lineage>The software Element was introduced in 2.0.0 beta 9. It
        replaces the software element. The 'software' element was introduced
        into EML 2.0, however it was derived from the eml-software module in
        EML 1.4.</doc:lineage>
      </xs:appinfo>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SoftwareType">
    <xs:choice>
      <xs:sequence>
        <xs:group ref="res:ResourceGroup" />
        <xs:element name="implementation" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>Implementation</doc:tooltip>
              <doc:summary>Describes the hardware and/or operating system
              requirementsfor one implementation of a package.</doc:summary>
              <doc:description>Implementation describes the hardware, operating
              system resources a package runs on. Note, a package can have
              multiple implementations. So for example, a package may be
              written in java and the package may run on numerous hardware
              and/or operating systems like Pentium/Linux, Pentium/NT and so
              on... Hardware and Software descriptions that have different
              requirements can be placed here.</doc:description>
              <doc:example>Please see the examples for each subelement of the
              'implementation' type.</doc:example>
              <doc:lineage>The implementation Element was introduced in 2.0.0
              beta 9.</doc:lineage>
            </xs:appinfo>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="distribution" type="xs:string"
              maxOccurs="unbounded">
                <xs:annotation>
                  <xs:appinfo>
                  <doc:tooltip>Distribution</doc:tooltip>
                  <doc:summary>Currently under construction in resource
                  module.</doc:summary>
                  <doc:description />
                  work in progress 
                  <doc:example>filename.jar</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="size" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Size</doc:tooltip>
                    <doc:summary>Physical size of an implemetation in Kilo,
                    Mega .... bytes.</doc:summary>
                    <doc:description />
                    <doc:example>100 Megabytes</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="language" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>International Language</doc:tooltip>
                    <doc:summary>The International Language of the software
                    implementation</doc:summary>
                    <doc:description />
                    <doc:example />
                  </xs:appinfo>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="LanguageValue" type="xs:string">
                      <xs:annotation>
                        <xs:appinfo>
                          <doc:tooltip>Language Value</doc:tooltip>
                          <doc:summary>The actual value for the language or
                          code</doc:summary>
                          <doc:description>The value could be just a text
                          string like english or french or it could be an
                          International Language code like ISO
                          639-2.</doc:description>
                          <doc:example>'english' or 'en'</doc:example>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LanguageCodeStandard" type="xs:string"
                    minOccurs="0">
                      <xs:annotation>
                        <xs:appinfo>
                          <doc:tooltip>Language Code Standard</doc:tooltip>
                          <doc:summary>The International Language Code being
                          used</doc:summary>
                          <doc:description>See
                          www.loc.gov/standards/iso639-2/</doc:description>
                          <doc:example>'que' for Quechua, 'eng' for English and
                          so on...</doc:example>
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="operatingSystem" type="xs:string" minOccurs="0"
              maxOccurs="unbounded">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Operating System</doc:tooltip>
                    <doc:summary>Operating System(s) an implementation runs
                    on</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>Windows 95, Window NT, Windows XP, Sun Solaris
                    2.8</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="machineProcessor" type="xs:string"
              minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Machine Processor</doc:tooltip>
                    <doc:summary>The Machine Processor required for
                    implementation</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>Pentium II, Intel 486, SUN Sparc</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="virtualMachine" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Virtual Machine</doc:tooltip>
                    <doc:summary>Virtual Machine implementation
                    requires</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>Java Virtual Machne 1.2</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="diskUsage" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Disk Usage</doc:tooltip>
                    <doc:summary>The minimum amount of Disk Space required to
                    install an lmplementation in Kilo, Mega bytes
                    etc...</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>220 Megabytes</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="runtimeMemoryUsage" type="xs:string"
              minOccurs="0">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Runtime Memory Usage</doc:tooltip>
                    <doc:summary>The minimum amount of memory required to run
                    an lmplementation in Kilo, Mega b ytes etc...</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>32 Megabytes</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="programmingLanguage" type="xs:string"
              minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Programming Language</doc:tooltip>
                    <doc:summary>The Computer Programming Language the Software
                    Package was programmed in.</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>C++, Java, C, C#, Perl, Cobol, Fortran, Lisp,
                    Visual Basic, VBA, Bourne Shell Script
                    etc....</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="checksum" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:appinfo>
                    <doc:tooltip>Checksum</doc:tooltip>
                    <doc:summary>The generated checksum value of a software
                    package that is a self-contained module.</doc:summary>
                    <doc:description>see summary</doc:description>
                    <doc:example>$sum software.jar 27021 22660</doc:example>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element ref="dependency" minOccurs="0"
              maxOccurs="unbounded" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element ref="dependency" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>Dependency</doc:tooltip>
              <doc:summary>Dependency describes the software packages that the
              software package is dependent upon.</doc:summary>
              <doc:description>The dependency element is recursive. It is a
              sub-element of the Software Element but it also has as a
              sub-element its parent element Software Package. Dependecy has
              been made optional because to make it mandatory does not allow
              the recursion to end. Dependency has also been made a sub-element
              of implementation because there can be both implementation and
              package level dependencies within a package.</doc:description>
              <doc:example />
              <doc:lineage>The implementation Element was introduced in 2.0.0
              beta 9.</doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="licenseURL" type="xs:string" />
          <xs:element name="license" type="xs:string" />
        </xs:choice>
        <xs:element name="version" type="xs:string">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip />
              <doc:summary>Version of the software being
              packaged.</doc:summary>
              <doc:description>String value corresponding to the major, minor,
              custom, and build version.</doc:description>
              <doc:example />
              <doc:lineage>The Version element was introduced in 2.0.0 beta
              9.</doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="access" type="acc:AccessType" minOccurs="0" />
        <xs:element name="project" type="proj:ResearchProjectType"
        minOccurs="0" />
      </xs:sequence>
      <xs:element name="references" type="xs:string" />
    </xs:choice>
    <xs:attribute name="id" type="xs:ID" use="optional" />
    <xs:attribute name="system" type="xs:string" use="optional" />
    <xs:attribute name="scope" type="res:ScopeType" use="optional"
    default="document" />
  </xs:complexType>
  <xs:simpleType name="Action">
    <xs:annotation>
      <xs:appinfo>
        <doc:tooltip>Action</doc:tooltip>
        <doc:summary>Describes what action needs to be undertaken (if any) for
        a software dependency at either the software package or implementation
        level.</doc:summary>
        <doc:description>This element and its enumerations of assert and
        install can be used as commands by a software application to carry out
        these actions on software package dependencies. This is a change from
        how we have used all previous elements within eml. Up until now all
        other elements have been simply metadata designed to describe data,
        literature citations, etc... with the Action element we can use this
        module as a command to carry out the action.</doc:description>
        <doc:example />
        <doc:lineage>The Action Element was introduced in 2.0.0 beta
        9.</doc:lineage>
      </xs:appinfo>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="install" />
      <xs:enumeration value="assert" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="dependency">
    <xs:annotation>
      <xs:appinfo>
        <doc:tooltip>Dependency</doc:tooltip>
        <doc:summary>Dependency describes the software package(s) that the
        software package is dependent upon.</doc:summary>
        <doc:description>The dependency element is recursive. It is a
        sub-element of the software Element but it also has as a sub-element
        its parent element Software Package. Dependecy has been made optional
        because to make it mandatory does not allow the recursion to end.
        Dependency has also been made a sub-element of implementation because
        there can be both implementation and package level dependencies within
        a package.</doc:description>
        <doc:example />
        <doc:lineage>The implementation Element was introduced in 2.0.0 beta
        9.</doc:lineage>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="action" type="Action" />
        <xs:element ref="software" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>

