<?xml version="1.0"?>
<xs:schema targetNamespace="eml:physical-2.0.0beta8" 
           xmlns="eml:physical-2.0.0beta8" 
           xmlns:doc="eml:documentation-2.0.0beta8" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="eml:documentation-2.0.0beta8" 
             schemaLocation="eml-documentation.xsd"/>
  <xs:annotation>
    <xs:documentation>
       '$RCSfile: eml-physical.xsd,v $'
       Copyright: 2000 Regents of the University of California and the
                  National Center for Ecological Analysis and Synthesis
     For Details: http://knb.ecoinformatics.org/
  
        '$Author: berkley $'
          '$Date: 2002-05-15 22:45:37 $'
      '$Revision: 1.12 $'
    
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
  
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
  
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    </xs:documentation>
    <xs:appinfo>
      <doc:moduleDocs>
        <doc:moduleName>eml-physical</doc:moduleName>
        <doc:moduleDescription>
          The eml-physical Module defines the structural
          characteristics of data formats as delivered over the wire or
          as found in a file system.  One physical object (which can be a
          bytestream or an object in a file system) might contain multiple
          entities (for example, this would be typical in a MS Access file
          that contained multiple tables of data).  However, it is typically
          used to describe a file or stream that is in some text-based 
          format such as ASCII or UTF-8, and includes the information needed
          to parse the data stream to extract the entity and its attributes
          from the stream.
        </doc:moduleDescription>
        <doc:recommendedUsage>
          all datasets
        </doc:recommendedUsage>
        <doc:standAlone>
          yes
        </doc:standAlone>
        <doc:relationship>
          <doc:moduleName>
            eml-dataset
          </doc:moduleName>
          <doc:relationshipType>
            has physical file format description for
          </doc:relationshipType>
        </doc:relationship>
        <doc:relationship>
          <doc:moduleName>
            eml-literature
          </doc:moduleName>
          <doc:relationshipType>
            has physical file format description for
          </doc:relationshipType>
        </doc:relationship>
        <doc:relationship>
          <doc:moduleName>
            eml-software
          </doc:moduleName>
          <doc:relationshipType>
            has physical file format description for
          </doc:relationshipType>
        </doc:relationship>
      </doc:moduleDocs>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="eml-physical">
    <xs:annotation>
      <xs:appinfo>
        <doc:tooltip>Physical structure.        </doc:tooltip>
        <doc:summary>Physical structure of an entity or entities.</doc:summary>
        <doc:description>
          Physical structure of an entity or entities.  This generally is a detailed 
          description of a text representation that shows how the columns and rows 
          of a table are represented, or simply the name of a well-known binary or 
          proprietary format (e.g., Microsoft Excel 2000).
        </doc:description>
        <doc:example/>
        <doc:lineage>
          The eml-physical was introduced into EML 1.4 as eml-file.
        </doc:lineage>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="identifier" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                Unique identifier
              </doc:tooltip>
              <doc:summary>
                The unique identifier of this metadata file or object.
              </doc:summary>
              <doc:description>
                The identifier field provides a unique identifier for this
                metadata documentation.  It will most likely be part of a 
                sequence of numbers or letters that are meaningful in a 
                larger context, such as a metadata catalog. That larger
                system can be identified in the "system" attribute. Multiple
                identifiers can be listed corresponding to different catalog
                systems.
              </doc:description>
              <doc:example><![CDATA[<identifier system="metacat">nceas.3.2</identifier>]]></doc:example>
              <doc:lineage>
                The 'identifier' field is derived from the eml-dataset 
                meta_file_id filed in EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="xs:string">
                <xs:attribute name="system" type="xs:string" use="optional">
                  <xs:annotation>
                    <xs:appinfo>
                      <doc:tooltip>
                    Catalog system
                  </doc:tooltip>
                      <doc:summary>
                    The catalog system in which this identifier is used.
                  </doc:summary>
                      <doc:description>
                    This element gives the name of the catalog system in which
                    this identifier is used.  It is useful to determine the
                    scope of the identifier, and to determine the semantics
                    of the various subparts of the identifier. Unresolved issue:
                    can or should this be a URI/URL pointing to the catalog
                    system, or just the name?
                  </doc:description>
                      <doc:example><![CDATA[
                    <identifier system="metacat">nceas.3.2</identifier>]]></doc:example>
                      <doc:lineage>
                    New to EML 2.0.
                  </doc:lineage>
                    </xs:appinfo>
                  </xs:annotation>
                </xs:attribute>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="format" type="xs:string">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                File format
              </doc:tooltip>
              <doc:summary>
                Contains the name of the format for this file.
              </doc:summary>
              <doc:description>
                This element contains the name of the file's format.
                The file's format is typically ASCII, Unicode, or some
                well-known binary format (e.g., Microsoft Excel 2000).  
                It is recommended to include a 
                complete MIME type here, such as image/jpeg or text/xml.  Note
                that this is the format of the physical file itself.
              </doc:description>
              <doc:example><![CDATA[<format>ASCII</format>]]></doc:example>
              <doc:lineage>
                The format element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="characterEncoding" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                Character Encoding
              </doc:tooltip>
              <doc:summary>
                Contains the name of the chracter encoding used for the data.
              </doc:summary>
              <doc:description>
                This element contains the name of the character encoding.
                This is typically ASCII or UTF-8, or one of the other common encodings.
              </doc:description>
              <doc:example><![CDATA[<characterEncoding>UTF-8</characterEncoding>]]></doc:example>
              <doc:lineage>
                Introduced in EML 2.0
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="size" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                Entity size
              </doc:tooltip>
              <doc:summary>
                Describes the physical size of the entity.
              </doc:summary>
              <doc:description>
                This element contains information of the physical size 
                of the entity, typically in bytes.
              </doc:description>
              <doc:example><![CDATA[<entitySize unit="bytes">13</entitySize>]]></doc:example>
              <doc:lineage>
                The entitySize was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="xs:string">
                <xs:attribute name="unit" use="required" default="bytes">
                  <xs:annotation>
                    <xs:appinfo>
                      <doc:tooltip>
                    Unit of measurement
                  </doc:tooltip>
                      <doc:summary>
                    Unit of measurement for the entity size, typically bytes
                  </doc:summary>
                      <doc:description>
                    This element gives the unit of measurement for the 
                    size of the entity, and is typically bytes.
                  </doc:description>
                      <doc:example><![CDATA[<entitySize unit="bytes">13</entitySize>]]></doc:example>
                      <doc:lineage>
                    The unit was introduced into EML 1.4.
                  </doc:lineage>
                    </xs:appinfo>
                  </xs:annotation>
                </xs:attribute>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="authentication" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                  Authentication method
              </doc:tooltip>
              <doc:summary>
                A value, typically a checksum, used to authenticate that the bitstream 
                delivered to the user is identical to the original.
              </doc:summary>
              <doc:description>
                  This element describes authentication procedures or 
                  techniques, typically by giving a checksum method (e.g., MD5) and 
                  checksum value for the bytestream.
              </doc:description>
              <doc:example>
                <![CDATA[
                  <authentication method="MD5">f5b2177ea03aea73de12da81f896fe40</authentication>
                ]]>
              </doc:example>
              <doc:lineage>
                The authentication element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="xs:string">
                <xs:attribute name="method" type="xs:string" use="optional">
                  <xs:annotation>
                    <xs:appinfo>
                      <doc:tooltip>
                  Authentication method
                      </doc:tooltip>
                      <doc:summary>
                        The method used to calculate an authentication checksum.
                      </doc:summary>
                      <doc:description>
                        This element names the method used to calculate and 
                        authentication checksum that can be used to validate a 
                        bytestream.  Typical checksum methods include MD5 and CRC.
                      </doc:description>
                      <doc:example>
                        <![CDATA[
                          <authentication method="MD5">f5b2177ea03aea73de12da81f896fe40</authentication>
                        ]]>
                      </doc:example>
                      <doc:lineage>
                        The authentication element was introduced into EML 1.4.
                      </doc:lineage>
                    </xs:appinfo>
                  </xs:annotation>
                </xs:attribute>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="compressionMethod" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                    Entity's compression method
              </doc:tooltip>
              <doc:summary>
                  Name ofthe entity's compression method
              </doc:summary>
              <doc:description>
                  This element describes any compression methods used to
                  compress the entity, such as zip, compress, etc.
              </doc:description>
              <doc:example/>
              <doc:lineage>
                The compressed element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="encodingMethod" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                    Encoding Method
              </doc:tooltip>
              <doc:summary>
                  Method used for encoding the entity
              </doc:summary>
              <doc:description>
                  This element describes the entity's encoded method, such as
                  MIME base64 encoding or binhex encoding.
              </doc:description>
              <doc:example/>
              <doc:lineage>
                The encoded element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="numHeaderLines" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                Header lines
              </doc:tooltip>
              <doc:summary>
                Header lines in the entity
              </doc:summary>
              <doc:description>
                Number of header lines or information that prepares data.
              </doc:description>
              <doc:example><![CDATA[<numHeaderLines>3</numHeaderLines>]]></doc:example>
              <doc:lineage>
                The numHeaderLines element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="recordDelimiter" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                  Record delimiter character
              </doc:tooltip>
              <doc:summary>
                  Character used to delimit records.
              </doc:summary>
              <doc:description>
                This element specifies the record delimiter character
                when the format is text. The record delimiter is usually a 
                newline (\n) on UNIX, a carriage return (\r) on MacOS, or 
                both (\r\n) on Windows/DOS.  Multiline records are usually 
                delimited with two line ending characters, for example on UNIX 
                it would be two newline characters (\n\n).
              </doc:description>
              <doc:example><![CDATA[<recordDelimiter>\n\r</recordDelimiter>]]></doc:example>
              <doc:lineage>
                The recordDelimiter element was introduced into EML 1.4.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="maxRecordLength" type="xs:string" minOccurs="0"/>
        <xs:element name="quoteCharacter" type="xs:string" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                  Quote character
              </doc:tooltip>
              <doc:summary>
                  Character used to quote values for delimeter escaping
              </doc:summary>
              <doc:description>
                This element specifies a character to be used in the entity
                for quoting values so that field delimeters can be used within
                the value.  This basically allows delimeter "escaping".  The
                quoteChacter is typically a " or '.
              </doc:description>
              <doc:example><![CDATA[<quoteCharacter>"</quoteCharacter>]]></doc:example>
              <doc:lineage>
                The quoteCharacter element was taken from the NBII standard.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="literalCharacter" type="xs:string" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:appinfo>
              <doc:tooltip>
                  Literal character
              </doc:tooltip>
              <doc:summary>
                  Character used to escape other characters
              </doc:summary>
              <doc:description>
                This element specifies a character to be used for escaping 
                character values so that the following character is treated as its literal
                value.  This allows "escaping" for special characters like quotes, commas, 
                and spaces when they aren't intended as a delimiter value.  The
                literalChacter is typically a \.
              </doc:description>
              <doc:example><![CDATA[<literalCharacter>\</literalCharacter>]]></doc:example>
              <doc:lineage>
                Introduced in EML 2.0.
              </doc:lineage>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element name="fieldStartColumn" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:appinfo>
                <doc:tooltip>
                  Start column
                </doc:tooltip>
                <doc:summary>
                  The starting column number for a fixed format attribute.
                </doc:summary>
                <doc:description>
                  FixedWidth fields have a set length, thus 
                  the end of the field can always be determined
                  by adding the fieldWidth to the starting 
                  column number.
                </doc:description>
                <doc:example>
                  any positive integer, see example in "delimeter" description
                </doc:example>
                <doc:lineage>
                  Introduced into EML 2.0. 
                </doc:lineage>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:choice>
            <xs:element name="fieldWidth" type="xs:string">
              <xs:annotation>
                <xs:appinfo>
                  <doc:tooltip>
                    Field width
                  </doc:tooltip>
                  <doc:summary>
                    FieldWidth specification for fixed field length.
                  </doc:summary>
                  <doc:description>
                    FixedWidth fields have a set length, thus 
                    the end of the field can always be determined
                    by adding the fieldWidth to the starting 
                    column number.
                  </doc:description>
                  <doc:example>
                    any positive integer, see example in "delimeter" 
                    description
                  </doc:example>
                  <doc:lineage>
                    The fieldWidth element was introduced into 
                    EML 1.4. Semantics changed to work identically to
                    the NBII DTD.
                  </doc:lineage>
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
            <xs:element name="fieldDelimiter" type="xs:string">
              <xs:annotation>
                <xs:appinfo>
                  <doc:tooltip>
                          Attribute delimiter
                      </doc:tooltip>
                  <doc:summary>
                        The end of the attribute (field) is delimited by a 
                        special character called a field delimiter.
                      </doc:summary>
                  <doc:description>
                        Variable width format fields (attributes) can vary in their 
                        field length, thus the end of the field is 
                        delimited by a special character called a 
                        field delimiter (typically a comma or a space).

                        Data sets are generally classified as fixedWidth
                        format or variableWidth format, but we have
                        determined that this is actually a per-field
                        classification because one may encounter
                        fixedWidth fields mixed together in the same
                        data file with variableWidth fields.
                        
                        In our encoding scheme, the start of each field
                        is assumed to be the column after the last column
                        of the previous field, or the first column
                        if this is the first field in the dataset, unless 
                        the starting column is explicity enumerated using the
                        "fieldStartColumn" element.
                        The end column for each field is classified
                        using either a special character delimeter indicated
                        using the filedDelimiter element,
                        or a fixed field length indicated by using the "fieldWidth"
                        element.  The delimiter for the last field in the data set can be omitted.
                        variableWidth fields can vary in their field length, and the end of
                        the field is delimited by a special character
                        called a field delimiter, usually a comma or
                        a tab character.  fixedWidth fields have a set
                        length, and so the end of the field can always
                        be determined by adding the fieldWidth to the
                        starting column number.  Here is an example:
                        
                        Assume we have the following data in a data set:

                        May,100aaaa,1.2,
                        April,200aaaa,3.4,
                        June,300bbbb,4.6,

                        The metadata indicating the physical layout of the 4 fields would include the 
                        following:

                        <![CDATA[
                          <delimiter>,</delimiter>
                          <fieldWidth>3</fieldWidth>
                          <fieldWidth>3</fieldWidth>
                          <delimiter>,</delimiter>
                        ]]>

                        In a strictly fixed format file, the metadata would be slightly different:

                        May100aaaa1.2
                        Apr200aaaa3.4
                        Jun300bbbb4.6

                        <![CDATA[
                          <fieldWidth>3</fieldWidth>
                          <fieldWidth>3</fieldWidth>
                          <fieldWidth>4</fieldWidth>
                          <fieldWidth>3</fieldWidth>
                        ]]>

                        or, one could explicitly describe the starting columns:

                        <![CDATA[
                          <fieldStartColumn>1</fieldStartColumn>
                          <fieldWidth>3</fieldWidth>
                          <fieldStartColumn>4</fieldStartColumn>
                          <fieldWidth>3</fieldWidth>
                          <fieldStartColumn>7</fieldStartColumn>
                          <fieldWidth>4</fieldWidth>
                          <fieldStartColumn>11</fieldStartColumn>
                          <fieldWidth>3</fieldWidth>
                        ]]></doc:description>
                  <doc:example>
                        comma, tab, white space, etc.
                      </doc:example>
                  <doc:lineage>
                        The delimiter element was introduced into 
                        EML 1.4. Semantics changed to work identically to
                        the NBII DTD, and then modified to fit more cases.
                      </doc:lineage>
                </xs:appinfo>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
