<?xml version="1.0"?>
<!--
       '$RCSfile: build.xml,v $'
       Copyright: 1997-2002 Regents of the University of California,
                            University of New Mexico, and
                            Arizona State University
        Sponsors: National Center for Ecological Analysis and Synthesis and
                  Partnership for Interdisciplinary Studies of Coastal Oceans,
                     University of California Santa Barbara
                  Long-Term Ecological Research Network Office,
                     University of New Mexico
                  Center for Environmental Studies, Arizona State University
   Other funding: National Science Foundation (see README for details)
                  The David and Lucile Packard Foundation
     For Details: http://knb.ecoinformatics.org/

        '$Author: jones $'
          '$Date: 2002-10-05 00:02:23 $'
      '$Revision: 1.52 $'

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->
<project name="eml" default="docs" basedir=".">

  <target name="config">
    <!-- These are properties you'll need to change to install the parser
      servlet on your system. -->
    <!-- where to install the servlet -->
    <property name="servlet.install.dir"
              value="/usr/local/devtools/jakarta-tomcat/webapps/emlparser"/>
    <!-- the server the servlet will run on -->
    <property name="server" value="http://trestles.nceas.ucsb.edu:8080"/>
    <!--the servlet context directory-->
    <property name="servletdir" value="emlparser"/>
    <!-- the path to the servlet from the servletdir -->
    <property name="servletpath" value="servlet/emlparser"/>
    <!-- namespaces that the servlet should auto resolve -->
    <property name="namespaces"
              value="eml://ecoinformatics.org/eml-2.0.0rc2 ${server}/${servletdir}/schema/eml.xsd"/>
    <!-- the path from the tomcat/bin directory to the config.xml file -->
    <property name="servletconfigfile" value="../webapps/emlparser/lib/config.xml"/>

  </target>

  <target name="init" depends="config">
    <property name="name" value="eml"/>
    <property name="version" value="2.0.0rc2"/>
    <property name="testdir" value="./test" />
    <property name="srcdir" value="./src" />
    <property name="sample.dir" value="lib/sample"/>
    <property name="build.dir" value="build"/>
    <property name="build.tests" value="${build.dir}/tests"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="build.docs" value="docs"/>
    <property name="build.stripped" value="stripped"/>
    <property name="style.dir" value="./style"/>
    <property name="config.file" value="lib/config.xml"/>
    <property name="xmlp"
        value="lib/xerces-2_0_1/xercesImpl.jar"/>
    <property name="api"
        value="lib/xerces-2_0_1/xmlParserAPIs.jar"/>
    <property name="xalan"
        value="lib/xalan-j_2_4_0/xalan.jar"/>
    <property name="xml-apis"
        value="lib/xalan-j_2_4_0/xml-apis.jar"/>
    <property name="jdom" value="lib/jdom.jar"/>
    <property name="htmldocbook-style"
        value="style/docbook-xsl-1.50.0/html/docbook.xsl"/>
    <filter token="server" value="http://knb.ecoinformatics.org"/>
    <filter token="docrooturl" value=""/>
    <filter token="version" value="${version}"/>
    <filter token="testdir" value="${testdir}" />
    <filter token="srcdir" value="${srcdir}" />
    <filter token="config.file" value="${config.file}" />
    <filter token="namespaces" value="${namespaces}"/>
    <filter token="servletconfigfile" value="${servletconfigfile}"/>
    <filter token="server" value="${server}"/>
    <filter token="servletdir" value="${servletdir}"/>
    <filter token="servletpath" value="$servletpath}"/>

    <property name="dist.dir" value="./dist"/>
    <property name="ver.dir" value="${dist.dir}/eml-${version}"/>
    <property name="ver.docs" value="${ver.dir}/docs"/>
    <property name="package.home" value="org/ecoinformatics" />
    <property name="configxml" value="lib/configxml.jar"/>
    <property name="cos" value="lib/cos.jar"/>
    <property name="jnet" value="lib/jnet.jar"/>
    <property name="servlet" value="lib/servlet.jar"/>
    <property name="cpath" value="${servlet}:${cos}:${jnet}:${xalan}:${xml-apis}:${xmlp}:${api}:${configxml}:${jdom}:${build.dir}/${name}.jar"/>

    <mkdir dir="${build.docs}"/>
  </target>

  <!-- Generate HTML documentation using an XSLT transform -->
  <!-- Note that you MUST have a Xalan 1.x XSLT processor on
        your CLASSPATH in order for this to work -->
  <target name="docs" depends="init,docbookhtml,faqhtml,tablehtml">
    <style basedir="." destdir="${build.docs}" style="eml-documentation.xsl"
           includes="*.xsd" excludes="eml-documentation.xsd" processor="trax"/>
    <style basedir="." destdir="${build.docs}" style="members.xsl"
           includes="members.xml" processor="trax"/>
    <copy todir="${build.docs}" filtering="yes">
      <fileset dir=".">
        <include name="index.html"/>
      </fileset>
    </copy>
    <copy todir="${build.docs}" filtering="no">
      <fileset dir=".">
        <include name="default.css"/>
        <include name="*.png"/>
      </fileset>
    </copy>
  </target>
  <!-- Generate versions of the XSD files with all annotation
        tags stripped from the source -->
  <!-- Note that you MUST have a Xalan 1.x XSLT processor on
        your CLASSPATH in order for this to work -->
  <target name="stripdocs" depends="init">
    <mkdir dir="${build.stripped}"/>
    <style basedir="." destdir="${build.stripped}" extension=".xsd"
           style="removeAnnotation.xsl" includes="*.xsd" processor="trax"/>
    <echo>

           ******************************************
                           Success!
           Stripped versions of the XSD files can now
           be found in the directory named "${build.stripped}"
           ******************************************
     </echo>
  </target>

  <target name="dist" depends="docs">
    <mkdir dir="${dist.dir}"/>
    <delete dir="${ver.dir}"/>
    <mkdir dir="${ver.dir}"/>
    <mkdir dir="${ver.docs}"/>
    <!--<mkdir dir="${ver.dir}/style"/>-->
    <copy file="./LICENSE" todir="${ver.dir}"/>
    <copy file="./README" todir="${ver.dir}"/>
    <copy todir="${ver.dir}" filtering="no">
      <fileset dir=".">
        <include name="*.xsd"/>
        <!--<include name="*.dtd"/>-->
        <include name="eml-unitDictionary.xml"/>
      </fileset>
    </copy>
    <copy todir="${ver.docs}" filtering="no">
      <fileset dir="./docs"/>
    </copy>
    <!--<copy todir="${ver.dir}/style">
      <fileset dir="${style.dir}"/>
    </copy>-->

    <delete file="./eml-${version}.zip"/>
    <zip zipfile="./eml-${version}.zip" basedir="${dist.dir}"/>
    <delete file="./eml-${version}.tar.gz"/>
    <tar tarfile="./eml-${version}.tar" basedir="${dist.dir}"/>
    <gzip zipfile="./eml-${version}.tar.gz" src="./eml-${version}.tar"/>
    <delete file="./eml-${version}.tar"/>
  </target>

  <target name="docbook" depends="init">
    <style basedir="." style="buildDocBook.xsl"
           in="eml.xsd" out="${build.dir}/eml-docbook-nosort.xml"
           processor="trax"/>
    <style basedir="." style="sortDocBook.xsl"
           in="${build.dir}/eml-docbook-nosort.xml" out="${build.dir}/eml-docbook.xml"
           processor="trax"/>
    <!-- the following copy is needed to do the ant replacement -->
    <copy file="${build.dir}/eml-docbook.xml" tofile="${build.docs}/eml-docbook.xml"
          filtering="yes"/>
    <echo>
      ***********************************************
        DocBook Created.  The DocBook documentation
        should now be in docs/eml-docbook.xml.
      ***********************************************
    </echo>
  </target>

  <target name="docbookhtml" depends="docbook">
    <echo>
      ************************************************
        Note that if this does not work for you,
        you need to check the newest version of
        Xalan out from the Apache CVS server and
        put the new xalan.jar file in your classpath.
        This will not work with Xalan 2.3.1!
      ************************************************
    </echo>
    <style basedir="." style="${htmldocbook-style}"
           in="${build.docs}/eml-docbook.xml"
           out="${build.docs}/eml-docbook.html"
           processor="trax"/>
    <copy file="default.css" todir="docs/"/>
    <echo>
      ************************************************
        Docbook html created.  The html docbook file
        is docs/eml-docbook.html.
      ************************************************
    </echo>
  </target>

  <target name="faqhtml" depends="docbookhtml">
    <echo>
      ************************************************
        Note that if this does not work for you,
        you need to check the newest version of
        Xalan out from the Apache CVS server and
        put the new xalan.jar file in your classpath.
        This will not work with Xalan 2.3.1!
      ************************************************
    </echo>
    <style basedir="." style="${htmldocbook-style}"
           in="eml-faq.xml"
           out="${build.docs}/eml-faq.html"
           processor="trax"/>
    <echo>
      ************************************************
        FAQ rendered to HTML.  The html file
        is docs/eml-faq.html.
      ************************************************
    </echo>
  </target>

  <target name="tablehtml">
    <copy file="default.css" todir="docs/"/>
    <style basedir="." style="buildDependencyTable.xsl"
           in="eml.xsd"
           out="docs/eml-dependencies.html"
           processor="trax"/>
    <echo>
      ************************************************
        Dependency Table rendered to HTML.
        The html file is docs/eml-dependencies.html.
      ************************************************
    </echo>
  </target>

  <target name="buildenumerations">
    <style basedir="." style="getunits.xsl"
           in="eml-unitDictionary.xml"
           out="docs/enumerations.xml"
           processor="trax"/>
    <echo>
      ************************************************
                    enumerations created.
                  see docs/enumerations.xml
      ************************************************
    </echo>
  </target>

  <target name="compile" depends="init">
    <mkdir dir="${build.tests}"/>
     <mkdir dir="${build.dest}"/>
     <copy todir="${build.tests}" filtering="yes">
       <fileset dir="${testdir}">
         <exclude name="**/CVS*"/>
         <exclude name="**/.#*"/>
       </fileset>
     </copy>
     <copy todir="${build.tests}" filtering="yes">
       <fileset dir="${srcdir}">
         <exclude name="**/CVS*"/>
         <exclude name="**/.#*"/>
       </fileset>
     </copy>

     <javac srcdir="${build.tests}"
            destdir="${build.dest}"
            classpath="${cpath}"
            debug="on"/>
  </target>

  <target name="jar" depends="compile">
    <jar jarfile="${build.dir}/${name}.jar" basedir="${build.dest}"
          includes="${package.home}/**" />
    <copy file="${build.dir}/${name}.jar" tofile="lib/${name}.jar"/>
  </target>

  <target name="compile-test" depends="jar">
     <!-- copy and compile the tests into a jar file -->
     <mkdir dir="${build.tests}"/>
     <mkdir dir="${build.dest}"/>
     <copy todir="${build.tests}" filtering="yes">
       <fileset dir="${testdir}">
         <exclude name="**/CVS*"/>
         <exclude name="**/.#*"/>
       </fileset>
     </copy>
     <javac srcdir="${build.tests}"
            destdir="${build.dest}"
            classpath="${cpath}"
            debug="on"/>

     <jar jarfile="${build.dir}/${name}-test.jar" basedir="${build.dest}"
          includes="${package.home}/${name}test/**" />

  </target>

  <!-- use the ant "junit" task to run JUnit tests. -->
  <target name="test" depends="compile-test">
     <!--copy the sample docs into the test directory so they get validated-->
     <copy todir="${testdir}">
       <fileset dir="${sample.dir}">
         <exclude name="**/CVS*"/>
         <exclude name="**/.#*"/>
       </fileset>
     </copy>
     <!-- use the ant "junit" task to run JUnit tests. -->
     <junit printsummary="yes" haltonfailure="no" fork="no"
            haltonerror="no">
       <classpath>
         <pathelement path="${cpath}:${build.dir}/${name}-test.jar:${build.dir}/${name}.jar" />
       </classpath>

       <formatter type="plain" />

       <batchtest fork="yes" todir="${build.dir}">
         <fileset dir="${build.tests}">
           <include name="**/*Test.java" />
         </fileset>
       </batchtest>
    </junit>
  </target>

  <target name="emlparsertest" depends="jar">
     <junit printsummary="yes" haltonfailure="no" fork="no"
            haltonerror="no">
       <classpath>
         <pathelement path="${cpath}:${build.dir}/${name}-test.jar:${build.dir}/${name}.jar" />
       </classpath>

       <formatter type="plain" />

       <batchtest fork="yes" todir="${build.dir}">
         <fileset dir="${build.tests}">
           <include name="**/EMLParserTest.java" />
         </fileset>
       </batchtest>
    </junit>
  </target>

  <target name="servletinstall" depends="jar">
    <copy file="lib/emlparser.html" tofile="${servlet.install.dir}/index.html"/>
    <copy file="lib/sample/eml-sample.xml" tofile="${servlet.install.dir}/eml-sample.xml"/>
    <copy file="lib/config.xml" tofile="${servlet.install.dir}/lib/config.xml"/>
    <copy file="lib/web.xml" tofile="${servlet.install.dir}/WEB-INF/web.xml"/>
    <copy file="lib/configxml.jar" tofile="${servlet.install.dir}/WEB-INF/lib/configxml.jar"/>
    <copy file="lib/cos.jar" tofile="${servlet.install.dir}/WEB-INF/lib/cos.jar"/>
    <copy file="lib/eml.jar" tofile="${servlet.install.dir}/WEB-INF/lib/eml.jar"/>
    <copy file="lib/jnet.jar" tofile="${servlet.install.dir}/WEB-INF/lib/jnet.jar"/>
    <copy file="${xalan}" tofile="${servlet.install.dir}/WEB-INF/lib/xalan.jar"/>
    <copy file="${xml-apis}" tofile="${servlet.install.dir}/WEB-INF/lib/xml-apis.jar"/>
    <copy file="${xmlp}" tofile="${servlet.install.dir}/WEB-INF/lib/xercesImpl.jar"/>
    <copy file="${api}" tofile="${servlet.install.dir}/WEB-INF/lib/xmlParserAPIs.jar"/>
    <copy todir="${servlet.install.dir}/schema">
      <fileset dir=".">
        <include name="*.xsd"/>
      </fileset>
    </copy>
  </target>

  <target name="clean">
    <delete dir="./build"/>
    <delete dir="./docs"/>
    <delete dir="./dist"/>
    <delete file="*.zip"/>
    <delete file="*.gz"/>
    <delete file="${servlet.install.dir}/WEB-INF/lib/eml.jar"/>
  </target>
</project>
